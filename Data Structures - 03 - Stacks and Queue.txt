    ‚ö°üß†
    Stacks  LIFO    Last In First Out
    Queue   FIFO    First In First Out

Stacks and queues have a lot of things in common.

    ‚Ä¢ They are both linear data structures in that you have one element and another element and then another element. 
    
    ‚Ä¢ They are both flexible with their sizes so you don't have to allocate initially them to have a size like 50, you can just add elements as you go and then also shrink it down. 

üåüThe main difference comes in how elements are removed from the stack or from the queue. 

    ‚Ä¢ A stack is what would be called a LIFO data structure, last in first out.
    
    It's much like an actual stack of plates. The last plate you put on top of that stack, that's going to be the first one you remove, its LIFO, last in first out.
    
    
    
    A queue though, is FIFO, first in first out. 
    
    So think about a queue or line of people waiting to get into a movie theater. 
    
    (When the movie theater doors open they don't first serve the person who just hopped into line five seconds ago. They serve the person who got in line at the very beginning an hour or two ago, and then the next person and then the next person. The very first person in is the very first person removed. That's what FIFO means, first in first out.)
    
    


Now let's look at the code for these data structures. 

    üé¨Data Structures: Stacks and Queues ‚è∞‚è©

Here's the framework for what our queue class needs.

We need this inner class which is a node, and it just keeps a pointer or variable that represents the data, and then also each node needs a pointer to the next node and we gave ourselves a little constructor here. 

Now when we implement a queue or when you use a queue we're going to add things here to the tail and remove from the head.s

    

Because you want to add from one side and remove from the other. Okay. And then we need these methods so let's walk through and actually start implementing these methods. So is empty is very simple just return if head is null. If head is null then the queues empty otherwise it's not. Okay. And then peek. Well what peek is going to do is just return head dot data. Now this will throw an exception when head is null, if you want you can go explicitly check for that exception.

Ok so the add and remove are the sort of interesting ones. So with add what we want to do here is add to the tail. So first thing we need to do is actually go and create this node, then if tail is not null, let tails next pointer point over this node, and then update the tail. Then what we want to do is we want to make sure that even, there could be a case for the array with the queue is completely empty in which case head is null, and so if the head is null, then this value should head, should also be this node. Alright. So that's all add has to do. 

Alright now for remove we want to remove from the head of the linked list so first what I'm going to do is actually get this head data then what we want to do is simply move the head. So I set head equals to head dot next and that basically removes it from the queue and then we need to say okay if head is now null make sure you set the tail to null too, and then go and return that data. So that's the basics of how we implement queue. It follows pretty logically from the actual design and the algorithms behind it.


Now let's look at the stack implementation. Much like with the queue, we have this inner class that is a node class, has a pointer to the next node. Here though we're going to want to add and remove from the top. So we just need a top, we don't need a head and a tail anymore. And then these are the methods were going to want to implement. The implementation for is empty is pretty straightforward, just if top is null, return true, essentially. And then for peek I'm gonna ignore know pointer checks just to keep my code really really simplistic for you all.


All peek needs to do is return top dot data. Ok so push is the first interesting method. So first we need to actually create this new node, so node, so new node data then this new node is going to become the top. So node dot next is going to point over to the old top and then the top points over to node. That's all push needs to do. 


Now for pop. Well pop is going to, first going to need to, we're going to want to return the old heads data, so first we need to actually just get that data. So head dot data, sorry top dot data. Then top just should move, be moved and pointed over to the new top or the next element down, and then we just need to return that data. Pretty straightforward. Now again I ignored null pointer checks but if you really want to be complete you'd probably want to do some sort of check that says hey if top is null throw an exception, if something like. 


That's the basics of how stacks and queues are implemented. They're not too tricky to implement just a little bit of, you know, pointers and making sure to update those things correctly. Now that you've seen both stacks and queues and implementation of them why don't you try these out on a new stack or queue problem. Good luck.
